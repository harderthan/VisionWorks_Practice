/*
# Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of NVIDIA CORPORATION nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include <iostream>
#include <sstream>
#include <iomanip>
#include <memory>

#include <VX/vx.h>
#include <NVX/nvx_timer.hpp>

#include "NVXIO/FrameSource.hpp"
#include "NVXIO/Render.hpp"
#include "NVXIO/Application.hpp"
#include "NVXIO/Utility.hpp"

struct EventData
{
    EventData(): alive(true), pause(false) {}

    bool alive;
    bool pause;
};

static void keyboardEventCallback(void* context, vx_char key, vx_uint32 /*x*/, vx_uint32 /*y*/)
{
    EventData* eventData = static_cast<EventData*>(context);
    if (key == 27) // escape
    {
        eventData->alive = false;
    }
    else if (key == 32)
    {
        eventData->pause = !eventData->pause;
    }
}

//
// main - Application entry point
//

int main(int argc, char** argv)
{
    nvxio::Application &app = nvxio::Application::get();

    //
    // Parse command line arguments
    //

    //std::string input = app.findSampleFilePath("cars.mp4");
    std::string input = "/home/intern01/Desktop/Work/VisionWorks-1.0-Samples/data/cars.mp4";
    app.setDescription("This sample plays a video from video-file or camera");
    app.addOption('s', "source", "Input URI", nvxio::OptionHandler::string(&input));
    app.init(argc, argv);

    //
    // Create OpenVX context
    //

    nvxio::ContextGuard context;

    //
    // Messages generated by the OpenVX framework will be processed by nvxio::stdoutLogCallback
    //

    vxRegisterLogCallback(context, &nvxio::stdoutLogCallback, vx_false_e);

    //
    // Create a Frame Source
    //

    std::unique_ptr<nvxio::FrameSource> source(nvxio::createDefaultFrameSource(context, input));
    source->open();  // 왜인지 모르겠으나 FrameSource를 생성한 후 한번은 open() 해줘야 됨.

    nvxio::FrameSource::Parameters config = source->getConfiguration();

    //
    // Create a Render
    //

    std::unique_ptr<nvxio::Render> render(nvxio::createDefaultRender(
                context, "Player Sample", config.frameWidth, config.frameHeight));


    vx_image frame = vxCreateImage(context, config.frameWidth,
                                   config.frameHeight, config.format);
    //NVXIO_CHECK_REFERENCE(frame);



    EventData eventData;
    while(eventData.alive)
    {
        nvxio::FrameSource::FrameStatus status = nvxio::FrameSource::OK;
        if (!eventData.pause)   // 영상이 종료 된 경우 fetch를 통해 다시 받는다.
        {
            status = source->fetch(frame);
        }

        switch(status)
        {
        case nvxio::FrameSource::OK:    // 일반적인 경우, 이미지를 렌더로 입력
        {
            render->putImage(frame);

            if (!render->flush())
                eventData.alive = false;
        } break;

        case nvxio::FrameSource::CLOSED:    // 이미지가 종료된 경우, eventData flag 값을 false.
        {
            // Reopen
            if (!source->open())
            {
                std::cerr << "Failed to reopen the source" << std::endl;
                eventData.alive = false;
            }
        } break;
        }
    }

    //
    // Release all objects
    //
    vxReleaseImage(&frame);

    return nvxio::Application::APP_EXIT_CODE_SUCCESS;
}
